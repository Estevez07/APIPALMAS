openapi: 3.0.3
info:
  title: Las Palmas API
  version: "1.0.0"
  description: >
    Documentación de la API **Las Palmas**.
    Incluye autenticación por correo o número celular, mensajería,
    gestión de pedidos y verificación de usuarios mediante OTP EMAIL.

servers:
  - url: http://localhost:8080
    description: Servidor local de desarrollo

tags:
  - name: Autenticación
    description: Registro, inicio de sesión y recuperación de contraseña.
  - name: Autenticación externa
    description: autenticación mediante google o facebook,no hace falta verificarlos.
  - name: Verificación
    description: Verificación de OTP para registro o restablecimiento de contraseña.
  - name: Pedidos
    description: Creación y gestión de pedidos.
  - name: Mensajes
    description: Envío, modificación, visualización y eliminación de mensajes.
  - name: Usuarios
    description: Consultas de usuarios.

paths:
  /auth/register:
    post:
      tags: [Autenticación]
      summary: Registrar un nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Usuario'
      responses:
        '201':
          description: >
           Usuario registrado correctamente.
           Reenvio de OTP de verificación de correo

        '400':
          description: Error en los datos enviados

  /auth/login:
    post:
      tags: [Autenticación]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Inicio de sesión exitoso, devuelve token JWT
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Credenciales inválidas

  /auth/forgot_password:
    post:
      tags: [Autenticación]
      summary: Solicitar recuperación de contraseña por correo electrónico
      requestBody:
        required: true
        content:
          application/json:
            schema:
             $ref: '#/components/schemas/OTPRequest'
      responses:
        '201':
          description: OTP enviado al correo
        '400':
          description: >
           Usuario no encontrado. 
           Usuario no verificado

  /auth/verify/register:
    post:
      tags: [Verificación]
      summary: Verificar OTP EMAIL para completar el registro
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificacionOTP'
      responses:
        '201':
          description: Verificación exitosa
        '400':
          description: |
           Usuario no encontrado.
           No existe un codigo de verificación activo.
           Código expirado.
           Código incorrecto.  

  /auth/verify/forgot_password:
    post:
      tags: [Verificación]
      summary: Verificar OTP para restablecer contraseña
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerificacionOTPPassword'
      responses:
        '201':
          description: Contraseña restablecida
        '400':
          description: |
           Usuario no encontrado.
           No existe un codigo de recuperación activo.
           Código expirado.
           Código incorrecto.  

  /pedidos:
    get:
      tags: [Pedidos]
      summary: Obtener todos los pedidos (solo ADMIN)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PedidoDTO'
        '400':
          description: Acceso denegado, no tiene permisos
    post:
      tags: [Pedidos]
      summary: Crear un nuevo pedido (usuario autenticado)
      description: |
        Permite a un usuario autenticado crear un nuevo pedido.
        Los archivos se envían como parte del cuerpo **multipart/form-data**.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                archivos:
                  type: array
                  items:
                    type: string
                    format: binary
              required:
               - archivos
      responses:
        '201':
          description: Pedido creado correctamente
          content:
           application/json:
             schema:
               $ref: '#/components/schemas/PedidoDTO'
        '400':
          description: Error en la creación del pedido
        '401':
          description: No autorizado (token inválido o ausente)
          
  /pedidos/{credencial}:
    get:
      tags: [Pedidos]
      summary: Obtener todos los pedidos de un usuario especifico (ADMIN o el mismo usuario autenticado)
      security:
        - bearerAuth: []
      parameters:
        - name: credencial
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Pedidos obtenidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PedidoDTO'
        '400':
          description: Acceso denegado, no tiene permisos

  /pedidos/{id}:
    put:
      tags: [Pedidos]
      summary: Modificar pedido (usuario autenticado)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: false
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                archivos:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Pedido modificado correctamente
        '401':
          description: No autorizado (token inválido o ausente)
    delete:
      tags: [Pedidos]
      summary: Eliminar pedido (solo ADMIN)
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Pedido eliminado
        '401':
          description: No autorizado (token inválido o ausente)

  /mensajes/enviar:
    post:
      tags: [Mensajes]
      summary: Enviar mensaje entre usuarios
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                contenido:
                  type: string
                idDestinatario:
                  type: integer
                archivos:
                  type: array
                  items:
                    type: string
                    format: binary
                idPedido:
                  type: integer
              required:
               - contenido
               - idDestinatario
      
      responses:
        '201':
          description: Mensaje enviado exitosamente
        '401':
          description: No autorizado (token inválido o ausente)

  /mensajes/entre:
    get:
      tags: [Mensajes]
      summary: Obtener mensajes entre dos usuarios
      security:
        - bearerAuth: []
      parameters:
        - name: idDestinatario
          in: query
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Lista de mensajes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MensajeDTO'
        '401':
          description: No autorizado (token inválido o ausente)
  /mensajes/{id}:
    put:
      tags: [Mensajes]
      summary: Actualizar el contenido de un mensaje
      description: Permite modificar el contenido de un mensaje existente mediante su ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador del mensaje que se desea actualizar.
          schema:
            type: integer
            format: int64
      requestBody:
       content:
        multipart/form-data:
          schema:
            type: object
            properties:
              archivos:
                type: array
                items:
                  type: string
                  format: binary
        application/json:   
          schema:
            type: object
            properties:
              nuevoContenido:
                type: string
                description: Nuevo contenido del mensaje     
                example: bla bla bla bla bla ....
            required:
              - nuevoContenido

      responses:
        '200':
          description: Contenido actualizado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    example: "Contenido actualizado correctamente"
        '400':
          description: Solicitud inválida.
        '401':
          description: No autorizado (token inválido o ausente)
        '404':
          description: Mensaje no encontrado.

    delete:
      tags: [Mensajes]
      summary: Eliminar un mensaje
      description: Elimina un mensaje existente mediante su ID.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Identificador del mensaje a eliminar.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Mensaje eliminado correctamente.
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    example: "Mensaje eliminado correctamente"
        '401':
          description: No autorizado (token inválido o ausente)
        '404':
          description: Mensaje no encontrado.


  /usuarios/con-pedidos:
    get:
      tags: [Usuarios]
      summary: Obtener usuarios con sus pedidos (Solo ADMIN)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Lista de usuarios con pedidos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PedidoDTO'
        '400':
          description: Acceso Denegado
        '401':
          description: No autorizado (token inválido o ausente)
  /oauth2/authorization/facebook:
    get:
      x-hidden: true
      tags: [Autenticación externa]
      summary: Iniciar sesión con Facebook
      description: >
        Redirige al usuario al inicio de sesión de **Facebook OAuth2**.
        Una vez autorizado, Facebook redirige a `/login/oauth2/code/facebook`.
        Este endpoint no devuelve JSON ni puede probarse desde Swagger UI.
      responses:
        '302':
          description: Redirección al flujo de autenticación de Facebook
          headers:
            Location:
              description: URL del formulario de login de Facebook
              schema:
                type: string
                example: https://www.facebook.com/v18.0/dialog/oauth?client_id=...

  /oauth2/authorization/google:
    get:
      x-hidden: true
      tags: [Autenticación externa]
      summary: Iniciar sesión con Google
      description: >
        Redirige al usuario al inicio de sesión de **Google OAuth2**.
        Una vez autorizado, Google redirige a `/login/oauth2/code/google`.
        Este endpoint no devuelve JSON ni puede probarse desde Swagger UI.
      responses:
        '302':
          description: Redirección al flujo de autenticación de Google
          headers:
            Location:
              description: URL del formulario de login de Google
              schema:
                type: string
                example: https://accounts.google.com/o/oauth2/v2/auth?client_id=...

  /login/failed:
    get:
      x-hidden: true
      tags: [Autenticación externa]
      summary: Endpoint que indica fallo en el inicio de sesión
      description: >
        Este endpoint devuelve un **400 Bad Request** cuando falla el inicio de sesión.
        Está oculto en la documentación de Swagger.
      responses:
        '400':
          description: Inicio de sesión fallido
          content:
            application/json:
              schema:
                type: object
                properties:
                  mensaje:
                    type: string
                    example: "Inicio de sesión fallido"              
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Usuario:
      type: object
      properties:
        nombre:
          type: string
          example: Luis
        apellidos:
          type: string
          example: Estevez  
        correo:
          type: string
          example: usuario@ejemplo.com
          description: "Correo electrónico (requerido si no se envía númeroCelular)"
        numeroCelular:
          type: string
          example: "1234567891"
          description: "Número de celular (requerido si no se envía correo)"
        contraseña:
          type: string
          example: "claveSegura123"
        fechaNac:
          format: date
          example: "2002-09-07"
      required:
      - nombre
      - apellidos
      - contraseña
      - fechaNac
      oneOf:
      - required: ["correo"]
      - required: ["numeroCelular"]

    LoginRequest:
      type: object
      properties:
        correo:
          type: string
          example: usuario@ejemplo.com
          description: "Correo electrónico (requerido si no se envía númeroCelular)"
        numeroCelular:
          type: string
          example: "5551234567"
          description: "Número de celular (requerido si no se envía correo)"
        contraseña:
          type: string
          example: "claveSegura123"
      required:
      - contraseña
      oneOf:
      - required: ["correo"]
      - required: ["numeroCelular"]

    AuthResponse:
      type: object
      properties:
        token:
          type: string
          example: Bearer eyJhbGciOiJIUzI1NiJ9...
        rol:
          type: string
          example: ROL_USER
          
    OTPRequest:
      type: object
      properties:
        correo:
          type: string
          example: usuario@ejemplo.com
      required : 
      - correo

    VerificacionOTP:
      type: object
      properties:
        correo:
          type: string
          example: usuario@ejemplo.com
        tokens:
          type: array
          items:
            type: object
            required:
            - token
            properties:
              token:
                type: string
                example: "123456"
      required:
      - correo
      - tokens

    VerificacionOTPPassword:
      allOf:
        - $ref: '#/components/schemas/VerificacionOTP'
        - type: object
          properties:
            contraseña:
              type: string
              example: "newPassword123"
          required:
          - contraseña

    PedidoDTO:
      type: object
      properties:
        id:
          type: integer
        fecha:
          type: string
          format: date-time
        archivos:
          type: array
          items:
            $ref: '#/components/schemas/ArchivoDTO'
        usuario:
          type: array
          items: 
            $ref: '#/components/schemas/UsuarioDTO'

      required:
       - id
       - fecha
       - archivos
       - usuario

    MensajeDTO:
      type: object
      properties:
        id:
         type: integer
         format: int64
         description: ID del mensaje
        contenido:
         type: string
        description: Contenido del mensaje
        fechaEnvio:
         type: string
         format: date-time
         description: Fecha y hora en que se envió el mensaje
        estado:
         type: string
         description: Estado del mensaje (por ejemplo. ENVIADO, LEÍDO, etc.)
        remitente:
         $ref: '#/components/schemas/UsuarioDTO'
        destinatario:
         $ref: '#/components/schemas/UsuarioDTO'
        archivos:
         type: array
         description: Lista de archivos adjuntos (opcional)
         items:
          $ref: '#/components/schemas/ArchivoDTO'
        pedido:
         $ref: '#/components/schemas/PedidoDTO'
      required:
      - contenido
      - remitente
      - destinatario
      - estado
      - fechaEnvio

    UsuarioDTO:
      type: object
      properties:
        nombre:
          type: string
          example: name
        apellidos:
          type: string
          example: lastname
        numeroCelular:
          type: string
          example: "5544332211"
        correo:
          type: string
          format: email
          example: usuario@gmail.com
        fechaNac:
         format: date
         example: "2002-09-07"

    ArchivoDTO:
      type: object
      properties:
        nombre:
          type: string
          example: imagen1.png
        tipo:
          type: string
          example: image/png
        base64:
          type: string
          description: Contenido del archivo en base64
          example: iVBORw0KGgoAAAANSUhEUgAA...